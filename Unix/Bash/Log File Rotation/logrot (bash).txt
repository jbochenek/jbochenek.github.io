#to do
#check for correct parameters
#check for directory write permission
#rename logs -> for example from application.0.log to application.1.log
#move logs
#deletes old logs as determined by parameter
#give error if logrot is passed too many parameters


#!/bin/bash

#emake directory if not already existing (can this be integrated into check param 2?) (commented out 8/5 after clarification from prof)
#mkdir -p ./log #make log is not already there
#chmod 777 ./log #give permission to log

#check for first param!
if [ -z "$1" ] || [ "$1" -lt "0" ] ; then
        echo "number of days of logs to keep is required to be a non-negative integer" #error text
        exit #adios
else
        a="$1" #a for the first local variable
fi
#check for second param and make folder if needed
#kay
if [ -z "$2" ] ; then
        b=log #b for the second local variable, sets dir to ./log if second param is not specified
else
        b="$2" #b for the second local variablem, sets dir to whatever second param is specified
        #mkdir -p ./"$b" #make b (commented out 8/5 after clarification from prof that we don't need to make the directories)
        #chmod 777 ./"$b" #give permission b
fi

#check for presence of third parameter and slap wrist
if [ ! -z "$3" ] ; then
        echo "logrot only takes 2 parameters, number of days to keep logs and location for directory"
        exit
fi

#check for permissions
if [ ! -d "$b" ] ; then
        echo "$b must be a path to a log directory with write access for $USER" #error text
        exit #adios
fi

#rename logs
for (( i=$a ; i>=0 ; i-- )) ; do #iteration tradionally starts at i, and progresses through the alphabet from there
        j=$(($i+1)) #j being after i
        path=./"$b"/*."$i".log #sets path to items with this loop of $i loop
        for f in $path ; do #loops through items in path who have values of $i only
                pat='.+\/(.+)\.[0-9]+\.log'
                if [[ $f =~ $pat ]]; then
                if [[ $f =~ $pat ]]; then
                        d=${BASH_REMATCH[1]}
                        if [ -r "$b/$d.$i.log" ] ; then #ifs for each file stem given
                                mv ./"$b"/"$d"."$i".log ./"$b"/"$d"."$j".log #renaming files
                                if [ $i == 0 ] ; then
                                        touch ./"$b"/"$d".0.log #make new d version of log if there is more than one log type name in files 8/5, only make new 0 if file recently changed is 1.
                                fi
                        fi
                fi
        done
done
#contemplate reading in how much the max number is setting that as max value of loop...how to do that? Isolate numbers and iteratively compare numbers and keeping highest number? Wait, wouldn't it be easier to set the top as half the number of files in the dir? Can that be done?

c=$(ls  -1 ./"$b" | wc -l) #it can be done :D
e=$(ls  -l ./"$b"/"$d".* | wc -l) #test number of unique named filed
#delete old logs up to param spec in position 1
for (( k=$a+1 ; k<=(($c/(($c/$e)))+1) ; k++ )) ; do #take value c and half of it (plus 1 to make sure it captures the last item) and iterate up to that value!
        path2=./"$b"/*."$k".log
        for g in $path2 ; do #go through files and remove those that match k
                rm -rf "$b"/*."$k".log
        done
done
