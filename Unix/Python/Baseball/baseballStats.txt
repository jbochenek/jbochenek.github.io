#!/usr/bin/env python3

import csv
import argparse
import pandas as pd
import numpy as np
import os
import json
from os import path

#arg parser setup
parser = argparse.ArgumentParser()
group_name = parser.add_mutually_exclusive_group()
group_batting = parser.add_mutually_exclusive_group()
group_name.add_argument("-i","--player-id", help="Print the player id in the output. This is the default", action="store_true", dest = "i", default = True)
group_name.add_argument("-n", "--name",  help="Print the player name as 'nameFirst nameLast' instead of the player id", action = "store_true", dest = "n", default=False)
group_name.add_argument("-g", "--given-name",  help="Print the player name as 'nameGiven' instead of the player id", action = "store_true", dest = "g", default = False)
group_batting.add_argument("-b", "--batting-avg",  help="Print the player batting avg", action = "store_true", dest = "b", default = True)
group_batting.add_argument("-a", "--at-bats-per-home-run",  help="Print the player at bats per home run instead of batting average", action = "store_true", dest = "a")
parser.add_argument("-t", "--top",  help="Print the top N players for a given statistic. Default is five",type=int, default = 5, dest = "t", action = "store")
parser.add_argument("-s", "--skip",  help="Print the player at bats per home run instead of batting average",type=int, default = 0, dest = "s", action = "store")
parser.add_argument("-m", "--minimum-at-bats",  help="Print the player at bats per home run instead of batting average",type=int, action = "store", default = 3000, dest = "m")
args = parser.parse_args()
#print(args)


#check to make sure edited files exist or run baseballEditor
if path.exists("final.csv") != True:
    #print("Running Baseball Stat Editor now")
    os.system('python3 baseballEditor')
#else:
    #print("files exist")

#load in file that baseballEditor creates
finalpd = pd.read_csv("final.csv")
#finaljson = json.load("final.json")

#print out error for t + s
if args.t + args.s >19428:
    print("Not enough rows for numbers input, change t or s")
    quit()

#start calculations for stuff
if args.n == True:
    if args.a == True:
       # print('-n, -a')
        temp0 = finalpd.sort_values(by = ['a'],ascending=True )
        mask0 = temp0['AB'] >= args.m
        temp0 = temp0[mask0]
        count0 = len(temp0.index)
        if count0 <= (args.s + args.t):
            print("Not enough rows for numbers input, change t, s, or m")
            quit()
        else:
            temp0 = temp0[['nameFirst','nameLast', 'a']]
            print(temp0[args.s:(args.t+args.s)].to_string(index=False, header=False))
    else:
        if args.b == True:
            #print('-n, -b')
            temp1 = finalpd.sort_values(by = ['b'],ascending=False )
            mask1 = temp1['AB'] >= args.m
            temp1 = temp1[mask1]
            count1 = len(temp1.index)
            if count1 <= (args.s + args.t):
                print("Not enough rows for numbers input, change t, s, or m")
                quit()
            else:
                temp1 = temp1[['nameFirst','nameLast', 'b']]
                print(temp1[args.s:(args.t+args.s)].to_string(index=False, header=False))



elif args.g == True:
    if args.a ==True:
        #print('-g, -a')
        temp2 = finalpd.sort_values(by = ['a'],ascending=True )
        mask2 = temp2['AB'] >= args.m
        temp2 = temp2[mask2]
        count2 = len(temp2.index)
        if count2<= (args.s + args.t):
            print("Not enough rows for numbers input, change t, s, or m")
            quit()
        else:
            temp2 = temp2[['nameGiven', 'a']]
            print(temp2[args.s:(args.t+args.s)].to_string(index=False, header=False))

    else:
        if args.b == True:
            #print('-g, -b')
            temp3 = finalpd.sort_values(by = ['b'],ascending=False )
            mask3 = temp3['AB'] >= args.m
            temp3 = temp3[mask3]
            count3 = len(temp3.index)
            if count3 <= (args.s + args.t):
                print("Not enough rows for numbers input, change t, s, or m")
                quit()
            else:
                temp3 = temp3[['nameGiven', 'b']]
                print(temp3[args.s:(args.t+args.s)].to_string(index=False, header=False))
else:
    if args.i == True:
        if args.a == True:
            #print('-i, -a')
            temp4 = finalpd.sort_values(by = ['a'],ascending=True )
            mask4 = temp4['AB'] >= args.m
            temp4 = temp4[mask4]
            count4 = len(temp4.index)
            if count4 <= (args.s + args.t):
                print("Not enough rows for numbers input, change t, s, or m")
                quit()
            else:
                temp4 = temp4[['playerID', 'a']]
                print(temp4[args.s:(args.t+args.s)].to_string(index=False, header=False))
        else:
            if args.b == True:
                #print('-i, -b')
                temp5 = finalpd.sort_values(by = ['b'],ascending=False )
                mask5 = temp5['AB'] >= args.m
                temp5 = temp5[mask5]
                count5 = len(temp5.index)
                if count5 <= (args.s + args.t):
                    print("Not enough rows for numbers input, change t, s, or m")
                    quit()
                else:
                    temp5 = temp5[['playerID','b']]
                    print(temp5[args.s:(args.t+args.s)].to_string(index=False, header=False))
#99 lines of code
